basePath: /v1
definitions:
  requests.AddAddressToRestaurantRequest:
    properties:
      address:
        $ref: '#/definitions/requests.Address'
    type: object
  requests.Address:
    properties:
      address_line_1:
        type: string
      address_line_2:
        type: string
      city:
        type: string
      post_code:
        type: string
    type: object
  requests.CreateRestaurantRequest:
    properties:
      restaurant:
        properties:
          address:
            $ref: '#/definitions/requests.Address'
          description:
            type: string
          name:
            type: string
        required:
        - name
        type: object
    type: object
  requests.UpdateRestaurantRequest:
    properties:
      restaurant:
        properties:
          description:
            type: string
          name:
            type: string
        required:
        - name
        type: object
    type: object
  requests.UserLoginRequest:
    properties:
      user:
        properties:
          email:
            type: string
          password:
            type: string
        required:
        - email
        - password
        type: object
    type: object
  requests.UserRegisterRequest:
    properties:
      user:
        properties:
          email:
            type: string
          password:
            type: string
          username:
            type: string
        required:
        - email
        - password
        type: object
    type: object
  responses.RestaurantAddressResponse:
    properties:
      addressID:
        type: string
      restaurantID:
        type: string
    type: object
  responses.RestaurantResponse:
    properties:
      restaurant:
        properties:
          description:
            type: string
          name:
            type: string
        required:
        - name
        type: object
    type: object
  responses.TokenResponse:
    properties:
      token:
        type: string
    type: object
  responses.UserResponse:
    properties:
      user:
        properties:
          email:
            type: string
          role:
            type: integer
          username:
            type: string
        type: object
    type: object
  responses.UserRestaurantResponse:
    properties:
      restaurantID:
        type: string
      userID:
        type: string
    type: object
  utils.Error:
    properties:
      errors:
        additionalProperties: true
        type: object
    type: object
host: localhost:8585
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a Restaurant backend RESTful API documentation.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Restaurant backend API server
  version: 0.1.0
paths:
  /auth/customer:
    post:
      consumes:
      - application/json
      description: Register new user in server
      parameters:
      - description: User credentials
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/requests.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.Error'
      summary: Register new user with customer role
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login to service using given credentials
      parameters:
      - description: User credentials
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/requests.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.Error'
      summary: Login to service
      tags:
      - Auth
  /auth/owner:
    post:
      consumes:
      - application/json
      description: Register new user in server
      parameters:
      - description: User credentials
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/requests.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.Error'
      summary: Register new user with owner role
      tags:
      - Auth
  /users:
    get:
      consumes:
      - application/json
      description: Get User by id in token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.Error'
      security:
      - Bearer: []
      summary: Get User by id in token
      tags:
      - Users
    post:
      consumes:
      - application/json
      deprecated: true
      description: Register new user in server
      parameters:
      - description: User credentials
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/requests.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.Error'
      summary: Register new user with owner role
      tags:
      - Auth
    put:
      consumes:
      - application/json
      description: Update User by id in token. It can update
      parameters:
      - description: User credentials
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/requests.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.Error'
      summary: Update user by id  in token
      tags:
      - Users
  /users/restaurants/:
    get:
      consumes:
      - application/json
      description: Get all Restaurant
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RestaurantResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.Error'
      summary: Get all Restaurant
      tags:
      - Restaurants
    post:
      consumes:
      - application/json
      description: Create Restaurant
      parameters:
      - description: Details of restaurant
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/requests.CreateRestaurantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RestaurantResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.Error'
      summary: Create Restaurant
      tags:
      - Restaurants
  /users/restaurants/{id}:
    delete:
      consumes:
      - application/json
      description: Remove restaurant from user
      parameters:
      - description: Id of restaurant
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserRestaurantResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.Error'
      summary: Remove restaurant from user
      tags:
      - Restaurants
    get:
      consumes:
      - application/json
      description: Get Restaurant by id
      parameters:
      - description: Id of restaurant
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RestaurantResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.Error'
      summary: Get Restaurant by id
      tags:
      - Restaurants
    put:
      consumes:
      - application/json
      description: Update Restaurant
      parameters:
      - description: Id of restaurant
        in: path
        name: id
        required: true
        type: string
      - description: Details of restaurant
        in: body
        name: restaurant
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateRestaurantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RestaurantResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.Error'
      summary: Update Restaurant
      tags:
      - Restaurants
  /users/restaurants/{id}/address:
    put:
      consumes:
      - application/json
      description: Replace address Restaurant
      parameters:
      - description: Id of restaurant
        in: path
        name: id
        required: true
        type: string
      - description: Details of address
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/requests.AddAddressToRestaurantRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.RestaurantAddressResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.Error'
      summary: Replace address Restaurant
      tags:
      - Restaurants
securityDefinitions:
  BasicAuth:
    type: basic
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
x-extension-openapi:
  example: value on a json format
